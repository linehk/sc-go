name: 💫 CI

on:
  push:
    branches: [master]

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup_env:
    name: ⚙️ Setup environment
    runs-on: self-hosted
    steps:
      - name: Add SHORT_SHA env property
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV

      - name: Escape commit message
        run: |
          import json
          import os
          import shlex
          with open('${{ github.event_path }}') as fh:
              event = json.load(fh)
          escaped = shlex.quote(event['head_commit']['message']).replace("'", "")
          with open(os.environ['GITHUB_ENV'], 'a') as fh:
              print(f'COMMIT_MSG={escaped}', file=fh)
        shell: python3 {0}

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

    outputs:
      short_sha: ${{ env.SHORT_SHA }}
      commit_msg: ${{ env.COMMIT_MSG }}
      branch_name: ${{ env.BRANCH_NAME }}

  test:
    name: ☔️ Tests
    runs-on: self-hosted

    # Setup postgres service for tests
    services:
      db:
        image: postgres:14
        env:
          POSTGRES_DB: testing
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Go with cache
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.work
          cache-dependency-path: |
            **/go.sum

      - name: Run Tests
        env:
          GITHUB_ACTIONS: true
          POSTGRES_DB: testing
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
        run: |
          go test -v -parallel 1 $(go list -f '{{.Dir}}/...' -m | xargs)

  build:
    name: 🔨 Build Binaries and Docker Image
    runs-on: self-hosted
    needs: setup_env

    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Set build start in env variable
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Send Discord Webhook
        uses: ./.github/actions/discord-webhook
        with:
          context: qa
          prod-webhook-url: ${{ secrets.DISCORD_WEBHOOK_PROD }}
          qa-webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 16776960
          embed-title: "${{ needs.setup_env.outputs.commit_msg }}  •  ${{ needs.setup_env.outputs.short_sha }}"
          embed-description: "```Build Started```"

      - name: Setup Go with cache
        uses: actions/setup-go@v3
        with:
          go-version-file: ./go.work
          cache-dependency-path: |
            **/go.sum

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build GO Server Binary
        run: |
          cd server && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\" -X main.BuildStart=${{ env.BUILD_START }}" -o server && cd ..

      - name: Build GO Cron Binary
        run: |
          cd cron && go build -ldflags "-s -w -X main.Version=${{ needs.setup_env.outputs.short_sha }} -X \"main.CommitMsg=${{ needs.setup_env.outputs.commit_msg }}\"" -o cron && cd ..

      - name: Build and push image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          file: ./Dockerfile.ci
          tags: stablecog/sc-server:${{ needs.setup_env.outputs.branch_name }}-${{ env.GITHUB_RUN_ID }}

      - name: Send Discord Webhook
        if: failure()
        uses: ./.github/actions/discord-webhook
        with:
          context: qa
          prod-webhook-url: ${{ secrets.DISCORD_WEBHOOK_PROD }}
          qa-webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-color: 15548997
          embed-title: "${{ needs.setup_env.outputs.commit_msg }}  •  ${{ needs.setup_env.outputs.short_sha }}"
          embed-description: "```🚨 Build FAILED 🚨```"

  deploy_server:
    name: 🧪 Deploy Server (QA)
    runs-on: self-hosted
    needs:
      - setup_env
      - build
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        uses: ./.github/actions/aws-deploy
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          task-definition: ./aws/qa/sc-server.json
          service: qa-sc-server-Service-XSweBbsvI0JC
          image: stablecog/sc-server:${{ needs.setup_env.outputs.branch_name}}-${{ env.GITHUB_RUN_ID }}
          embed-title: "${{ needs.setup_env.outputs.commit_msg }}  •  ${{ needs.setup_env.outputs.short_sha }}"
          prod-webhook-url: ${{ secrets.DISCORD_WEBHOOK_PROD }}
          qa-webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          env: qa

  deploy_cron:
    name: 🧪 Deploy Cron (QA)
    runs-on: self-hosted
    needs:
      - setup_env
      - build
    env:
      GITHUB_RUN_ID: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        uses: ./.github/actions/aws-deploy
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          service: qa-sc-cron
          task-definition: ./aws/qa/sc-cron.json
          image: stablecog/sc-server:${{ needs.setup_env.outputs.branch_name}}-${{ env.GITHUB_RUN_ID }}
          env: qa

  release_pull_request:
    runs-on: ubuntu-latest
    name: 🚦 Create Release PR
    needs:
      - test
      - build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create/Update Pull Request
        uses: devops-infra/action-pull-request@v0.5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          assignee: ${{ github.actor }}
          title: Release to Production
          label: automatic,release
          target_branch: production
          template: .github/RELEASE_PR.md
          get_diff: true
