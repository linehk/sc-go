// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/upscalemodel"
	"github.com/stablecog/sc-go/database/ent/upscaleoutput"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/enttypes"
)

// UpscaleCreate is the builder for creating a Upscale entity.
type UpscaleCreate struct {
	config
	mutation *UpscaleMutation
	hooks    []Hook
}

// SetWidth sets the "width" field.
func (uc *UpscaleCreate) SetWidth(i int32) *UpscaleCreate {
	uc.mutation.SetWidth(i)
	return uc
}

// SetHeight sets the "height" field.
func (uc *UpscaleCreate) SetHeight(i int32) *UpscaleCreate {
	uc.mutation.SetHeight(i)
	return uc
}

// SetScale sets the "scale" field.
func (uc *UpscaleCreate) SetScale(i int32) *UpscaleCreate {
	uc.mutation.SetScale(i)
	return uc
}

// SetCountryCode sets the "country_code" field.
func (uc *UpscaleCreate) SetCountryCode(s string) *UpscaleCreate {
	uc.mutation.SetCountryCode(s)
	return uc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableCountryCode(s *string) *UpscaleCreate {
	if s != nil {
		uc.SetCountryCode(*s)
	}
	return uc
}

// SetStatus sets the "status" field.
func (uc *UpscaleCreate) SetStatus(u upscale.Status) *UpscaleCreate {
	uc.mutation.SetStatus(u)
	return uc
}

// SetFailureReason sets the "failure_reason" field.
func (uc *UpscaleCreate) SetFailureReason(s string) *UpscaleCreate {
	uc.mutation.SetFailureReason(s)
	return uc
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableFailureReason(s *string) *UpscaleCreate {
	if s != nil {
		uc.SetFailureReason(*s)
	}
	return uc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (uc *UpscaleCreate) SetStripeProductID(s string) *UpscaleCreate {
	uc.mutation.SetStripeProductID(s)
	return uc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableStripeProductID(s *string) *UpscaleCreate {
	if s != nil {
		uc.SetStripeProductID(*s)
	}
	return uc
}

// SetSystemGenerated sets the "system_generated" field.
func (uc *UpscaleCreate) SetSystemGenerated(b bool) *UpscaleCreate {
	uc.mutation.SetSystemGenerated(b)
	return uc
}

// SetNillableSystemGenerated sets the "system_generated" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableSystemGenerated(b *bool) *UpscaleCreate {
	if b != nil {
		uc.SetSystemGenerated(*b)
	}
	return uc
}

// SetSourceType sets the "source_type" field.
func (uc *UpscaleCreate) SetSourceType(et enttypes.SourceType) *UpscaleCreate {
	uc.mutation.SetSourceType(et)
	return uc
}

// SetNillableSourceType sets the "source_type" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableSourceType(et *enttypes.SourceType) *UpscaleCreate {
	if et != nil {
		uc.SetSourceType(*et)
	}
	return uc
}

// SetUserID sets the "user_id" field.
func (uc *UpscaleCreate) SetUserID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetUserID(u)
	return uc
}

// SetDeviceInfoID sets the "device_info_id" field.
func (uc *UpscaleCreate) SetDeviceInfoID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetDeviceInfoID(u)
	return uc
}

// SetModelID sets the "model_id" field.
func (uc *UpscaleCreate) SetModelID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetModelID(u)
	return uc
}

// SetAPITokenID sets the "api_token_id" field.
func (uc *UpscaleCreate) SetAPITokenID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetAPITokenID(u)
	return uc
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableAPITokenID(u *uuid.UUID) *UpscaleCreate {
	if u != nil {
		uc.SetAPITokenID(*u)
	}
	return uc
}

// SetStartedAt sets the "started_at" field.
func (uc *UpscaleCreate) SetStartedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetStartedAt(t)
	return uc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableStartedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetStartedAt(*t)
	}
	return uc
}

// SetCompletedAt sets the "completed_at" field.
func (uc *UpscaleCreate) SetCompletedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetCompletedAt(t)
	return uc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableCompletedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetCompletedAt(*t)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UpscaleCreate) SetCreatedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableCreatedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UpscaleCreate) SetUpdatedAt(t time.Time) *UpscaleCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableUpdatedAt(t *time.Time) *UpscaleCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UpscaleCreate) SetID(u uuid.UUID) *UpscaleCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UpscaleCreate) SetNillableID(u *uuid.UUID) *UpscaleCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// SetUser sets the "user" edge to the User entity.
func (uc *UpscaleCreate) SetUser(u *User) *UpscaleCreate {
	return uc.SetUserID(u.ID)
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (uc *UpscaleCreate) SetDeviceInfo(d *DeviceInfo) *UpscaleCreate {
	return uc.SetDeviceInfoID(d.ID)
}

// SetUpscaleModelsID sets the "upscale_models" edge to the UpscaleModel entity by ID.
func (uc *UpscaleCreate) SetUpscaleModelsID(id uuid.UUID) *UpscaleCreate {
	uc.mutation.SetUpscaleModelsID(id)
	return uc
}

// SetUpscaleModels sets the "upscale_models" edge to the UpscaleModel entity.
func (uc *UpscaleCreate) SetUpscaleModels(u *UpscaleModel) *UpscaleCreate {
	return uc.SetUpscaleModelsID(u.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (uc *UpscaleCreate) SetAPITokensID(id uuid.UUID) *UpscaleCreate {
	uc.mutation.SetAPITokensID(id)
	return uc
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (uc *UpscaleCreate) SetNillableAPITokensID(id *uuid.UUID) *UpscaleCreate {
	if id != nil {
		uc = uc.SetAPITokensID(*id)
	}
	return uc
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (uc *UpscaleCreate) SetAPITokens(a *ApiToken) *UpscaleCreate {
	return uc.SetAPITokensID(a.ID)
}

// AddUpscaleOutputIDs adds the "upscale_outputs" edge to the UpscaleOutput entity by IDs.
func (uc *UpscaleCreate) AddUpscaleOutputIDs(ids ...uuid.UUID) *UpscaleCreate {
	uc.mutation.AddUpscaleOutputIDs(ids...)
	return uc
}

// AddUpscaleOutputs adds the "upscale_outputs" edges to the UpscaleOutput entity.
func (uc *UpscaleCreate) AddUpscaleOutputs(u ...*UpscaleOutput) *UpscaleCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUpscaleOutputIDs(ids...)
}

// Mutation returns the UpscaleMutation object of the builder.
func (uc *UpscaleCreate) Mutation() *UpscaleMutation {
	return uc.mutation
}

// Save creates the Upscale in the database.
func (uc *UpscaleCreate) Save(ctx context.Context) (*Upscale, error) {
	uc.defaults()
	return withHooks[*Upscale, UpscaleMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UpscaleCreate) SaveX(ctx context.Context) *Upscale {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UpscaleCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UpscaleCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UpscaleCreate) defaults() {
	if _, ok := uc.mutation.SystemGenerated(); !ok {
		v := upscale.DefaultSystemGenerated
		uc.mutation.SetSystemGenerated(v)
	}
	if _, ok := uc.mutation.SourceType(); !ok {
		v := upscale.DefaultSourceType
		uc.mutation.SetSourceType(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := upscale.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := upscale.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := upscale.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UpscaleCreate) check() error {
	if _, ok := uc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Upscale.width"`)}
	}
	if _, ok := uc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Upscale.height"`)}
	}
	if _, ok := uc.mutation.Scale(); !ok {
		return &ValidationError{Name: "scale", err: errors.New(`ent: missing required field "Upscale.scale"`)}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Upscale.status"`)}
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := upscale.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Upscale.status": %w`, err)}
		}
	}
	if _, ok := uc.mutation.SystemGenerated(); !ok {
		return &ValidationError{Name: "system_generated", err: errors.New(`ent: missing required field "Upscale.system_generated"`)}
	}
	if _, ok := uc.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "Upscale.source_type"`)}
	}
	if v, ok := uc.mutation.SourceType(); ok {
		if err := upscale.SourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "source_type", err: fmt.Errorf(`ent: validator failed for field "Upscale.source_type": %w`, err)}
		}
	}
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Upscale.user_id"`)}
	}
	if _, ok := uc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info_id", err: errors.New(`ent: missing required field "Upscale.device_info_id"`)}
	}
	if _, ok := uc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Upscale.model_id"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Upscale.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Upscale.updated_at"`)}
	}
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Upscale.user"`)}
	}
	if _, ok := uc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info", err: errors.New(`ent: missing required edge "Upscale.device_info"`)}
	}
	if _, ok := uc.mutation.UpscaleModelsID(); !ok {
		return &ValidationError{Name: "upscale_models", err: errors.New(`ent: missing required edge "Upscale.upscale_models"`)}
	}
	return nil
}

func (uc *UpscaleCreate) sqlSave(ctx context.Context) (*Upscale, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UpscaleCreate) createSpec() (*Upscale, *sqlgraph.CreateSpec) {
	var (
		_node = &Upscale{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: upscale.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: upscale.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Width(); ok {
		_spec.SetField(upscale.FieldWidth, field.TypeInt32, value)
		_node.Width = value
	}
	if value, ok := uc.mutation.Height(); ok {
		_spec.SetField(upscale.FieldHeight, field.TypeInt32, value)
		_node.Height = value
	}
	if value, ok := uc.mutation.Scale(); ok {
		_spec.SetField(upscale.FieldScale, field.TypeInt32, value)
		_node.Scale = value
	}
	if value, ok := uc.mutation.CountryCode(); ok {
		_spec.SetField(upscale.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = &value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.SetField(upscale.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := uc.mutation.FailureReason(); ok {
		_spec.SetField(upscale.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = &value
	}
	if value, ok := uc.mutation.StripeProductID(); ok {
		_spec.SetField(upscale.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = &value
	}
	if value, ok := uc.mutation.SystemGenerated(); ok {
		_spec.SetField(upscale.FieldSystemGenerated, field.TypeBool, value)
		_node.SystemGenerated = value
	}
	if value, ok := uc.mutation.SourceType(); ok {
		_spec.SetField(upscale.FieldSourceType, field.TypeEnum, value)
		_node.SourceType = value
	}
	if value, ok := uc.mutation.StartedAt(); ok {
		_spec.SetField(upscale.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := uc.mutation.CompletedAt(); ok {
		_spec.SetField(upscale.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(upscale.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(upscale.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.UserTable,
			Columns: []string{upscale.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.DeviceInfoTable,
			Columns: []string{upscale.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceInfoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpscaleModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.UpscaleModelsTable,
			Columns: []string{upscale.UpscaleModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: upscalemodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upscale.APITokensTable,
			Columns: []string{upscale.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.APITokenID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpscaleOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upscale.UpscaleOutputsTable,
			Columns: []string{upscale.UpscaleOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: upscaleoutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UpscaleCreateBulk is the builder for creating many Upscale entities in bulk.
type UpscaleCreateBulk struct {
	config
	builders []*UpscaleCreate
}

// Save creates the Upscale entities in the database.
func (ucb *UpscaleCreateBulk) Save(ctx context.Context) ([]*Upscale, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Upscale, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpscaleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UpscaleCreateBulk) SaveX(ctx context.Context) []*Upscale {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UpscaleCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UpscaleCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
