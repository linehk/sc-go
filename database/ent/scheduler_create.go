// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/generationmodel"
	"github.com/stablecog/sc-go/database/ent/scheduler"
)

// SchedulerCreate is the builder for creating a Scheduler entity.
type SchedulerCreate struct {
	config
	mutation *SchedulerMutation
	hooks    []Hook
}

// SetNameInWorker sets the "name_in_worker" field.
func (sc *SchedulerCreate) SetNameInWorker(s string) *SchedulerCreate {
	sc.mutation.SetNameInWorker(s)
	return sc
}

// SetIsActive sets the "is_active" field.
func (sc *SchedulerCreate) SetIsActive(b bool) *SchedulerCreate {
	sc.mutation.SetIsActive(b)
	return sc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableIsActive(b *bool) *SchedulerCreate {
	if b != nil {
		sc.SetIsActive(*b)
	}
	return sc
}

// SetIsDefault sets the "is_default" field.
func (sc *SchedulerCreate) SetIsDefault(b bool) *SchedulerCreate {
	sc.mutation.SetIsDefault(b)
	return sc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableIsDefault(b *bool) *SchedulerCreate {
	if b != nil {
		sc.SetIsDefault(*b)
	}
	return sc
}

// SetIsHidden sets the "is_hidden" field.
func (sc *SchedulerCreate) SetIsHidden(b bool) *SchedulerCreate {
	sc.mutation.SetIsHidden(b)
	return sc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableIsHidden(b *bool) *SchedulerCreate {
	if b != nil {
		sc.SetIsHidden(*b)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SchedulerCreate) SetCreatedAt(t time.Time) *SchedulerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableCreatedAt(t *time.Time) *SchedulerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SchedulerCreate) SetUpdatedAt(t time.Time) *SchedulerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableUpdatedAt(t *time.Time) *SchedulerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SchedulerCreate) SetID(u uuid.UUID) *SchedulerCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SchedulerCreate) SetNillableID(u *uuid.UUID) *SchedulerCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (sc *SchedulerCreate) AddGenerationIDs(ids ...uuid.UUID) *SchedulerCreate {
	sc.mutation.AddGenerationIDs(ids...)
	return sc
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (sc *SchedulerCreate) AddGenerations(g ...*Generation) *SchedulerCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddGenerationIDs(ids...)
}

// AddGenerationModelIDs adds the "generation_models" edge to the GenerationModel entity by IDs.
func (sc *SchedulerCreate) AddGenerationModelIDs(ids ...uuid.UUID) *SchedulerCreate {
	sc.mutation.AddGenerationModelIDs(ids...)
	return sc
}

// AddGenerationModels adds the "generation_models" edges to the GenerationModel entity.
func (sc *SchedulerCreate) AddGenerationModels(g ...*GenerationModel) *SchedulerCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sc.AddGenerationModelIDs(ids...)
}

// Mutation returns the SchedulerMutation object of the builder.
func (sc *SchedulerCreate) Mutation() *SchedulerMutation {
	return sc.mutation
}

// Save creates the Scheduler in the database.
func (sc *SchedulerCreate) Save(ctx context.Context) (*Scheduler, error) {
	sc.defaults()
	return withHooks[*Scheduler, SchedulerMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SchedulerCreate) SaveX(ctx context.Context) *Scheduler {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SchedulerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SchedulerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SchedulerCreate) defaults() {
	if _, ok := sc.mutation.IsActive(); !ok {
		v := scheduler.DefaultIsActive
		sc.mutation.SetIsActive(v)
	}
	if _, ok := sc.mutation.IsDefault(); !ok {
		v := scheduler.DefaultIsDefault
		sc.mutation.SetIsDefault(v)
	}
	if _, ok := sc.mutation.IsHidden(); !ok {
		v := scheduler.DefaultIsHidden
		sc.mutation.SetIsHidden(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := scheduler.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := scheduler.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := scheduler.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SchedulerCreate) check() error {
	if _, ok := sc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "Scheduler.name_in_worker"`)}
	}
	if _, ok := sc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Scheduler.is_active"`)}
	}
	if _, ok := sc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Scheduler.is_default"`)}
	}
	if _, ok := sc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "Scheduler.is_hidden"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Scheduler.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Scheduler.updated_at"`)}
	}
	return nil
}

func (sc *SchedulerCreate) sqlSave(ctx context.Context) (*Scheduler, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SchedulerCreate) createSpec() (*Scheduler, *sqlgraph.CreateSpec) {
	var (
		_node = &Scheduler{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scheduler.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scheduler.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.NameInWorker(); ok {
		_spec.SetField(scheduler.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := sc.mutation.IsActive(); ok {
		_spec.SetField(scheduler.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sc.mutation.IsDefault(); ok {
		_spec.SetField(scheduler.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := sc.mutation.IsHidden(); ok {
		_spec.SetField(scheduler.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(scheduler.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduler.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sc.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scheduler.GenerationsTable,
			Columns: []string{scheduler.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.GenerationModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scheduler.GenerationModelsTable,
			Columns: scheduler.GenerationModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationmodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SchedulerCreateBulk is the builder for creating many Scheduler entities in bulk.
type SchedulerCreateBulk struct {
	config
	builders []*SchedulerCreate
}

// Save creates the Scheduler entities in the database.
func (scb *SchedulerCreateBulk) Save(ctx context.Context) ([]*Scheduler, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scheduler, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SchedulerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SchedulerCreateBulk) SaveX(ctx context.Context) []*Scheduler {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SchedulerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SchedulerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
