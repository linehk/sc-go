// Code generated by ent, DO NOT EDIT.

package generationoutputembed

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLTE(FieldID, id))
}

// PromptEmbedding applies equality check predicate on the "prompt_embedding" field. It's identical to PromptEmbeddingEQ.
func PromptEmbedding(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldPromptEmbedding, v))
}

// ImageEmbedding applies equality check predicate on the "image_embedding" field. It's identical to ImageEmbeddingEQ.
func ImageEmbedding(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldImageEmbedding, v))
}

// OutputID applies equality check predicate on the "output_id" field. It's identical to OutputIDEQ.
func OutputID(v uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldOutputID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldUpdatedAt, v))
}

// PromptEmbeddingEQ applies the EQ predicate on the "prompt_embedding" field.
func PromptEmbeddingEQ(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldPromptEmbedding, v))
}

// PromptEmbeddingNEQ applies the NEQ predicate on the "prompt_embedding" field.
func PromptEmbeddingNEQ(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNEQ(FieldPromptEmbedding, v))
}

// PromptEmbeddingIn applies the In predicate on the "prompt_embedding" field.
func PromptEmbeddingIn(vs ...pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldIn(FieldPromptEmbedding, vs...))
}

// PromptEmbeddingNotIn applies the NotIn predicate on the "prompt_embedding" field.
func PromptEmbeddingNotIn(vs ...pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNotIn(FieldPromptEmbedding, vs...))
}

// PromptEmbeddingGT applies the GT predicate on the "prompt_embedding" field.
func PromptEmbeddingGT(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGT(FieldPromptEmbedding, v))
}

// PromptEmbeddingGTE applies the GTE predicate on the "prompt_embedding" field.
func PromptEmbeddingGTE(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGTE(FieldPromptEmbedding, v))
}

// PromptEmbeddingLT applies the LT predicate on the "prompt_embedding" field.
func PromptEmbeddingLT(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLT(FieldPromptEmbedding, v))
}

// PromptEmbeddingLTE applies the LTE predicate on the "prompt_embedding" field.
func PromptEmbeddingLTE(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLTE(FieldPromptEmbedding, v))
}

// ImageEmbeddingEQ applies the EQ predicate on the "image_embedding" field.
func ImageEmbeddingEQ(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldImageEmbedding, v))
}

// ImageEmbeddingNEQ applies the NEQ predicate on the "image_embedding" field.
func ImageEmbeddingNEQ(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNEQ(FieldImageEmbedding, v))
}

// ImageEmbeddingIn applies the In predicate on the "image_embedding" field.
func ImageEmbeddingIn(vs ...pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldIn(FieldImageEmbedding, vs...))
}

// ImageEmbeddingNotIn applies the NotIn predicate on the "image_embedding" field.
func ImageEmbeddingNotIn(vs ...pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNotIn(FieldImageEmbedding, vs...))
}

// ImageEmbeddingGT applies the GT predicate on the "image_embedding" field.
func ImageEmbeddingGT(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGT(FieldImageEmbedding, v))
}

// ImageEmbeddingGTE applies the GTE predicate on the "image_embedding" field.
func ImageEmbeddingGTE(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGTE(FieldImageEmbedding, v))
}

// ImageEmbeddingLT applies the LT predicate on the "image_embedding" field.
func ImageEmbeddingLT(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLT(FieldImageEmbedding, v))
}

// ImageEmbeddingLTE applies the LTE predicate on the "image_embedding" field.
func ImageEmbeddingLTE(v pgvector.Vector) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLTE(FieldImageEmbedding, v))
}

// OutputIDEQ applies the EQ predicate on the "output_id" field.
func OutputIDEQ(v uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldOutputID, v))
}

// OutputIDNEQ applies the NEQ predicate on the "output_id" field.
func OutputIDNEQ(v uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNEQ(FieldOutputID, v))
}

// OutputIDIn applies the In predicate on the "output_id" field.
func OutputIDIn(vs ...uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldIn(FieldOutputID, vs...))
}

// OutputIDNotIn applies the NotIn predicate on the "output_id" field.
func OutputIDNotIn(vs ...uuid.UUID) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNotIn(FieldOutputID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasGenerationOutputs applies the HasEdge predicate on the "generation_outputs" edge.
func HasGenerationOutputs() predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GenerationOutputsTable, GenerationOutputsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenerationOutputsWith applies the HasEdge predicate on the "generation_outputs" edge with a given conditions (other predicates).
func HasGenerationOutputsWith(preds ...predicate.GenerationOutput) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GenerationOutputsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GenerationOutputsTable, GenerationOutputsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GenerationOutputEmbed) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GenerationOutputEmbed) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GenerationOutputEmbed) predicate.GenerationOutputEmbed {
	return predicate.GenerationOutputEmbed(func(s *sql.Selector) {
		p(s.Not())
	})
}
