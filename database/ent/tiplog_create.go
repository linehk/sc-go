// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/tiplog"
	"github.com/stablecog/sc-go/database/ent/user"
)

// TipLogCreate is the builder for creating a TipLog entity.
type TipLogCreate struct {
	config
	mutation *TipLogMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (tlc *TipLogCreate) SetAmount(i int32) *TipLogCreate {
	tlc.mutation.SetAmount(i)
	return tlc
}

// SetTippedToDiscordID sets the "tipped_to_discord_id" field.
func (tlc *TipLogCreate) SetTippedToDiscordID(s string) *TipLogCreate {
	tlc.mutation.SetTippedToDiscordID(s)
	return tlc
}

// SetTippedBy sets the "tipped_by" field.
func (tlc *TipLogCreate) SetTippedBy(u uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTippedBy(u)
	return tlc
}

// SetTippedTo sets the "tipped_to" field.
func (tlc *TipLogCreate) SetTippedTo(u uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTippedTo(u)
	return tlc
}

// SetNillableTippedTo sets the "tipped_to" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableTippedTo(u *uuid.UUID) *TipLogCreate {
	if u != nil {
		tlc.SetTippedTo(*u)
	}
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TipLogCreate) SetCreatedAt(t time.Time) *TipLogCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableCreatedAt(t *time.Time) *TipLogCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetUpdatedAt sets the "updated_at" field.
func (tlc *TipLogCreate) SetUpdatedAt(t time.Time) *TipLogCreate {
	tlc.mutation.SetUpdatedAt(t)
	return tlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableUpdatedAt(t *time.Time) *TipLogCreate {
	if t != nil {
		tlc.SetUpdatedAt(*t)
	}
	return tlc
}

// SetID sets the "id" field.
func (tlc *TipLogCreate) SetID(u uuid.UUID) *TipLogCreate {
	tlc.mutation.SetID(u)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TipLogCreate) SetNillableID(u *uuid.UUID) *TipLogCreate {
	if u != nil {
		tlc.SetID(*u)
	}
	return tlc
}

// SetTipsReceivedID sets the "tips_received" edge to the User entity by ID.
func (tlc *TipLogCreate) SetTipsReceivedID(id uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTipsReceivedID(id)
	return tlc
}

// SetNillableTipsReceivedID sets the "tips_received" edge to the User entity by ID if the given value is not nil.
func (tlc *TipLogCreate) SetNillableTipsReceivedID(id *uuid.UUID) *TipLogCreate {
	if id != nil {
		tlc = tlc.SetTipsReceivedID(*id)
	}
	return tlc
}

// SetTipsReceived sets the "tips_received" edge to the User entity.
func (tlc *TipLogCreate) SetTipsReceived(u *User) *TipLogCreate {
	return tlc.SetTipsReceivedID(u.ID)
}

// SetTipsGivenID sets the "tips_given" edge to the User entity by ID.
func (tlc *TipLogCreate) SetTipsGivenID(id uuid.UUID) *TipLogCreate {
	tlc.mutation.SetTipsGivenID(id)
	return tlc
}

// SetTipsGiven sets the "tips_given" edge to the User entity.
func (tlc *TipLogCreate) SetTipsGiven(u *User) *TipLogCreate {
	return tlc.SetTipsGivenID(u.ID)
}

// Mutation returns the TipLogMutation object of the builder.
func (tlc *TipLogCreate) Mutation() *TipLogMutation {
	return tlc.mutation
}

// Save creates the TipLog in the database.
func (tlc *TipLogCreate) Save(ctx context.Context) (*TipLog, error) {
	tlc.defaults()
	return withHooks[*TipLog, TipLogMutation](ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TipLogCreate) SaveX(ctx context.Context) *TipLog {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TipLogCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TipLogCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TipLogCreate) defaults() {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := tiplog.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		v := tiplog.DefaultUpdatedAt()
		tlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := tiplog.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TipLogCreate) check() error {
	if _, ok := tlc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TipLog.amount"`)}
	}
	if _, ok := tlc.mutation.TippedToDiscordID(); !ok {
		return &ValidationError{Name: "tipped_to_discord_id", err: errors.New(`ent: missing required field "TipLog.tipped_to_discord_id"`)}
	}
	if _, ok := tlc.mutation.TippedBy(); !ok {
		return &ValidationError{Name: "tipped_by", err: errors.New(`ent: missing required field "TipLog.tipped_by"`)}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TipLog.created_at"`)}
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TipLog.updated_at"`)}
	}
	if _, ok := tlc.mutation.TipsGivenID(); !ok {
		return &ValidationError{Name: "tips_given", err: errors.New(`ent: missing required edge "TipLog.tips_given"`)}
	}
	return nil
}

func (tlc *TipLogCreate) sqlSave(ctx context.Context) (*TipLog, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TipLogCreate) createSpec() (*TipLog, *sqlgraph.CreateSpec) {
	var (
		_node = &TipLog{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tiplog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tiplog.FieldID,
			},
		}
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.Amount(); ok {
		_spec.SetField(tiplog.FieldAmount, field.TypeInt32, value)
		_node.Amount = value
	}
	if value, ok := tlc.mutation.TippedToDiscordID(); ok {
		_spec.SetField(tiplog.FieldTippedToDiscordID, field.TypeString, value)
		_node.TippedToDiscordID = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(tiplog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tlc.mutation.UpdatedAt(); ok {
		_spec.SetField(tiplog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tlc.mutation.TipsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsReceivedTable,
			Columns: []string{tiplog.TipsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TippedTo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.TipsGivenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tiplog.TipsGivenTable,
			Columns: []string{tiplog.TipsGivenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TippedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TipLogCreateBulk is the builder for creating many TipLog entities in bulk.
type TipLogCreateBulk struct {
	config
	builders []*TipLogCreate
}

// Save creates the TipLog entities in the database.
func (tlcb *TipLogCreateBulk) Save(ctx context.Context) ([]*TipLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TipLog, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TipLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TipLogCreateBulk) SaveX(ctx context.Context) []*TipLog {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TipLogCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TipLogCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
