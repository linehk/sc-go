// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/ipblacklist"
)

// IPBlackListCreate is the builder for creating a IPBlackList entity.
type IPBlackListCreate struct {
	config
	mutation *IPBlackListMutation
	hooks    []Hook
}

// SetIP sets the "ip" field.
func (iblc *IPBlackListCreate) SetIP(s string) *IPBlackListCreate {
	iblc.mutation.SetIP(s)
	return iblc
}

// SetCreatedAt sets the "created_at" field.
func (iblc *IPBlackListCreate) SetCreatedAt(t time.Time) *IPBlackListCreate {
	iblc.mutation.SetCreatedAt(t)
	return iblc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iblc *IPBlackListCreate) SetNillableCreatedAt(t *time.Time) *IPBlackListCreate {
	if t != nil {
		iblc.SetCreatedAt(*t)
	}
	return iblc
}

// SetUpdatedAt sets the "updated_at" field.
func (iblc *IPBlackListCreate) SetUpdatedAt(t time.Time) *IPBlackListCreate {
	iblc.mutation.SetUpdatedAt(t)
	return iblc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iblc *IPBlackListCreate) SetNillableUpdatedAt(t *time.Time) *IPBlackListCreate {
	if t != nil {
		iblc.SetUpdatedAt(*t)
	}
	return iblc
}

// SetID sets the "id" field.
func (iblc *IPBlackListCreate) SetID(u uuid.UUID) *IPBlackListCreate {
	iblc.mutation.SetID(u)
	return iblc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (iblc *IPBlackListCreate) SetNillableID(u *uuid.UUID) *IPBlackListCreate {
	if u != nil {
		iblc.SetID(*u)
	}
	return iblc
}

// Mutation returns the IPBlackListMutation object of the builder.
func (iblc *IPBlackListCreate) Mutation() *IPBlackListMutation {
	return iblc.mutation
}

// Save creates the IPBlackList in the database.
func (iblc *IPBlackListCreate) Save(ctx context.Context) (*IPBlackList, error) {
	iblc.defaults()
	return withHooks[*IPBlackList, IPBlackListMutation](ctx, iblc.sqlSave, iblc.mutation, iblc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iblc *IPBlackListCreate) SaveX(ctx context.Context) *IPBlackList {
	v, err := iblc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iblc *IPBlackListCreate) Exec(ctx context.Context) error {
	_, err := iblc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblc *IPBlackListCreate) ExecX(ctx context.Context) {
	if err := iblc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iblc *IPBlackListCreate) defaults() {
	if _, ok := iblc.mutation.CreatedAt(); !ok {
		v := ipblacklist.DefaultCreatedAt()
		iblc.mutation.SetCreatedAt(v)
	}
	if _, ok := iblc.mutation.UpdatedAt(); !ok {
		v := ipblacklist.DefaultUpdatedAt()
		iblc.mutation.SetUpdatedAt(v)
	}
	if _, ok := iblc.mutation.ID(); !ok {
		v := ipblacklist.DefaultID()
		iblc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iblc *IPBlackListCreate) check() error {
	if _, ok := iblc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "IPBlackList.ip"`)}
	}
	if _, ok := iblc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IPBlackList.created_at"`)}
	}
	if _, ok := iblc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IPBlackList.updated_at"`)}
	}
	return nil
}

func (iblc *IPBlackListCreate) sqlSave(ctx context.Context) (*IPBlackList, error) {
	if err := iblc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iblc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iblc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	iblc.mutation.id = &_node.ID
	iblc.mutation.done = true
	return _node, nil
}

func (iblc *IPBlackListCreate) createSpec() (*IPBlackList, *sqlgraph.CreateSpec) {
	var (
		_node = &IPBlackList{config: iblc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ipblacklist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ipblacklist.FieldID,
			},
		}
	)
	if id, ok := iblc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := iblc.mutation.IP(); ok {
		_spec.SetField(ipblacklist.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := iblc.mutation.CreatedAt(); ok {
		_spec.SetField(ipblacklist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iblc.mutation.UpdatedAt(); ok {
		_spec.SetField(ipblacklist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// IPBlackListCreateBulk is the builder for creating many IPBlackList entities in bulk.
type IPBlackListCreateBulk struct {
	config
	builders []*IPBlackListCreate
}

// Save creates the IPBlackList entities in the database.
func (iblcb *IPBlackListCreateBulk) Save(ctx context.Context) ([]*IPBlackList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iblcb.builders))
	nodes := make([]*IPBlackList, len(iblcb.builders))
	mutators := make([]Mutator, len(iblcb.builders))
	for i := range iblcb.builders {
		func(i int, root context.Context) {
			builder := iblcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPBlackListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iblcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iblcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iblcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iblcb *IPBlackListCreateBulk) SaveX(ctx context.Context) []*IPBlackList {
	v, err := iblcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iblcb *IPBlackListCreateBulk) Exec(ctx context.Context) error {
	_, err := iblcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iblcb *IPBlackListCreateBulk) ExecX(ctx context.Context) {
	if err := iblcb.Exec(ctx); err != nil {
		panic(err)
	}
}
