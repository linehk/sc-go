// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/predicate"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceoveroutput"
)

// VoiceoverOutputUpdate is the builder for updating VoiceoverOutput entities.
type VoiceoverOutputUpdate struct {
	config
	hooks     []Hook
	mutation  *VoiceoverOutputMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VoiceoverOutputUpdate builder.
func (vou *VoiceoverOutputUpdate) Where(ps ...predicate.VoiceoverOutput) *VoiceoverOutputUpdate {
	vou.mutation.Where(ps...)
	return vou
}

// SetAudioPath sets the "audio_path" field.
func (vou *VoiceoverOutputUpdate) SetAudioPath(s string) *VoiceoverOutputUpdate {
	vou.mutation.SetAudioPath(s)
	return vou
}

// SetIsFavorited sets the "is_favorited" field.
func (vou *VoiceoverOutputUpdate) SetIsFavorited(b bool) *VoiceoverOutputUpdate {
	vou.mutation.SetIsFavorited(b)
	return vou
}

// SetNillableIsFavorited sets the "is_favorited" field if the given value is not nil.
func (vou *VoiceoverOutputUpdate) SetNillableIsFavorited(b *bool) *VoiceoverOutputUpdate {
	if b != nil {
		vou.SetIsFavorited(*b)
	}
	return vou
}

// SetVoiceoverID sets the "voiceover_id" field.
func (vou *VoiceoverOutputUpdate) SetVoiceoverID(u uuid.UUID) *VoiceoverOutputUpdate {
	vou.mutation.SetVoiceoverID(u)
	return vou
}

// SetDeletedAt sets the "deleted_at" field.
func (vou *VoiceoverOutputUpdate) SetDeletedAt(t time.Time) *VoiceoverOutputUpdate {
	vou.mutation.SetDeletedAt(t)
	return vou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vou *VoiceoverOutputUpdate) SetNillableDeletedAt(t *time.Time) *VoiceoverOutputUpdate {
	if t != nil {
		vou.SetDeletedAt(*t)
	}
	return vou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vou *VoiceoverOutputUpdate) ClearDeletedAt() *VoiceoverOutputUpdate {
	vou.mutation.ClearDeletedAt()
	return vou
}

// SetUpdatedAt sets the "updated_at" field.
func (vou *VoiceoverOutputUpdate) SetUpdatedAt(t time.Time) *VoiceoverOutputUpdate {
	vou.mutation.SetUpdatedAt(t)
	return vou
}

// SetVoiceoversID sets the "voiceovers" edge to the Voiceover entity by ID.
func (vou *VoiceoverOutputUpdate) SetVoiceoversID(id uuid.UUID) *VoiceoverOutputUpdate {
	vou.mutation.SetVoiceoversID(id)
	return vou
}

// SetVoiceovers sets the "voiceovers" edge to the Voiceover entity.
func (vou *VoiceoverOutputUpdate) SetVoiceovers(v *Voiceover) *VoiceoverOutputUpdate {
	return vou.SetVoiceoversID(v.ID)
}

// Mutation returns the VoiceoverOutputMutation object of the builder.
func (vou *VoiceoverOutputUpdate) Mutation() *VoiceoverOutputMutation {
	return vou.mutation
}

// ClearVoiceovers clears the "voiceovers" edge to the Voiceover entity.
func (vou *VoiceoverOutputUpdate) ClearVoiceovers() *VoiceoverOutputUpdate {
	vou.mutation.ClearVoiceovers()
	return vou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vou *VoiceoverOutputUpdate) Save(ctx context.Context) (int, error) {
	vou.defaults()
	return withHooks[int, VoiceoverOutputMutation](ctx, vou.sqlSave, vou.mutation, vou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vou *VoiceoverOutputUpdate) SaveX(ctx context.Context) int {
	affected, err := vou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vou *VoiceoverOutputUpdate) Exec(ctx context.Context) error {
	_, err := vou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vou *VoiceoverOutputUpdate) ExecX(ctx context.Context) {
	if err := vou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vou *VoiceoverOutputUpdate) defaults() {
	if _, ok := vou.mutation.UpdatedAt(); !ok {
		v := voiceoveroutput.UpdateDefaultUpdatedAt()
		vou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vou *VoiceoverOutputUpdate) check() error {
	if _, ok := vou.mutation.VoiceoversID(); vou.mutation.VoiceoversCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VoiceoverOutput.voiceovers"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vou *VoiceoverOutputUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VoiceoverOutputUpdate {
	vou.modifiers = append(vou.modifiers, modifiers...)
	return vou
}

func (vou *VoiceoverOutputUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vou.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   voiceoveroutput.Table,
			Columns: voiceoveroutput.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: voiceoveroutput.FieldID,
			},
		},
	}
	if ps := vou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vou.mutation.AudioPath(); ok {
		_spec.SetField(voiceoveroutput.FieldAudioPath, field.TypeString, value)
	}
	if value, ok := vou.mutation.IsFavorited(); ok {
		_spec.SetField(voiceoveroutput.FieldIsFavorited, field.TypeBool, value)
	}
	if value, ok := vou.mutation.DeletedAt(); ok {
		_spec.SetField(voiceoveroutput.FieldDeletedAt, field.TypeTime, value)
	}
	if vou.mutation.DeletedAtCleared() {
		_spec.ClearField(voiceoveroutput.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vou.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceoveroutput.FieldUpdatedAt, field.TypeTime, value)
	}
	if vou.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceoveroutput.VoiceoversTable,
			Columns: []string{voiceoveroutput.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceover.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vou.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceoveroutput.VoiceoversTable,
			Columns: []string{voiceoveroutput.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceover.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voiceoveroutput.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vou.mutation.done = true
	return n, nil
}

// VoiceoverOutputUpdateOne is the builder for updating a single VoiceoverOutput entity.
type VoiceoverOutputUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VoiceoverOutputMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetAudioPath sets the "audio_path" field.
func (vouo *VoiceoverOutputUpdateOne) SetAudioPath(s string) *VoiceoverOutputUpdateOne {
	vouo.mutation.SetAudioPath(s)
	return vouo
}

// SetIsFavorited sets the "is_favorited" field.
func (vouo *VoiceoverOutputUpdateOne) SetIsFavorited(b bool) *VoiceoverOutputUpdateOne {
	vouo.mutation.SetIsFavorited(b)
	return vouo
}

// SetNillableIsFavorited sets the "is_favorited" field if the given value is not nil.
func (vouo *VoiceoverOutputUpdateOne) SetNillableIsFavorited(b *bool) *VoiceoverOutputUpdateOne {
	if b != nil {
		vouo.SetIsFavorited(*b)
	}
	return vouo
}

// SetVoiceoverID sets the "voiceover_id" field.
func (vouo *VoiceoverOutputUpdateOne) SetVoiceoverID(u uuid.UUID) *VoiceoverOutputUpdateOne {
	vouo.mutation.SetVoiceoverID(u)
	return vouo
}

// SetDeletedAt sets the "deleted_at" field.
func (vouo *VoiceoverOutputUpdateOne) SetDeletedAt(t time.Time) *VoiceoverOutputUpdateOne {
	vouo.mutation.SetDeletedAt(t)
	return vouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vouo *VoiceoverOutputUpdateOne) SetNillableDeletedAt(t *time.Time) *VoiceoverOutputUpdateOne {
	if t != nil {
		vouo.SetDeletedAt(*t)
	}
	return vouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vouo *VoiceoverOutputUpdateOne) ClearDeletedAt() *VoiceoverOutputUpdateOne {
	vouo.mutation.ClearDeletedAt()
	return vouo
}

// SetUpdatedAt sets the "updated_at" field.
func (vouo *VoiceoverOutputUpdateOne) SetUpdatedAt(t time.Time) *VoiceoverOutputUpdateOne {
	vouo.mutation.SetUpdatedAt(t)
	return vouo
}

// SetVoiceoversID sets the "voiceovers" edge to the Voiceover entity by ID.
func (vouo *VoiceoverOutputUpdateOne) SetVoiceoversID(id uuid.UUID) *VoiceoverOutputUpdateOne {
	vouo.mutation.SetVoiceoversID(id)
	return vouo
}

// SetVoiceovers sets the "voiceovers" edge to the Voiceover entity.
func (vouo *VoiceoverOutputUpdateOne) SetVoiceovers(v *Voiceover) *VoiceoverOutputUpdateOne {
	return vouo.SetVoiceoversID(v.ID)
}

// Mutation returns the VoiceoverOutputMutation object of the builder.
func (vouo *VoiceoverOutputUpdateOne) Mutation() *VoiceoverOutputMutation {
	return vouo.mutation
}

// ClearVoiceovers clears the "voiceovers" edge to the Voiceover entity.
func (vouo *VoiceoverOutputUpdateOne) ClearVoiceovers() *VoiceoverOutputUpdateOne {
	vouo.mutation.ClearVoiceovers()
	return vouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vouo *VoiceoverOutputUpdateOne) Select(field string, fields ...string) *VoiceoverOutputUpdateOne {
	vouo.fields = append([]string{field}, fields...)
	return vouo
}

// Save executes the query and returns the updated VoiceoverOutput entity.
func (vouo *VoiceoverOutputUpdateOne) Save(ctx context.Context) (*VoiceoverOutput, error) {
	vouo.defaults()
	return withHooks[*VoiceoverOutput, VoiceoverOutputMutation](ctx, vouo.sqlSave, vouo.mutation, vouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vouo *VoiceoverOutputUpdateOne) SaveX(ctx context.Context) *VoiceoverOutput {
	node, err := vouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vouo *VoiceoverOutputUpdateOne) Exec(ctx context.Context) error {
	_, err := vouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vouo *VoiceoverOutputUpdateOne) ExecX(ctx context.Context) {
	if err := vouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vouo *VoiceoverOutputUpdateOne) defaults() {
	if _, ok := vouo.mutation.UpdatedAt(); !ok {
		v := voiceoveroutput.UpdateDefaultUpdatedAt()
		vouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vouo *VoiceoverOutputUpdateOne) check() error {
	if _, ok := vouo.mutation.VoiceoversID(); vouo.mutation.VoiceoversCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VoiceoverOutput.voiceovers"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vouo *VoiceoverOutputUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VoiceoverOutputUpdateOne {
	vouo.modifiers = append(vouo.modifiers, modifiers...)
	return vouo
}

func (vouo *VoiceoverOutputUpdateOne) sqlSave(ctx context.Context) (_node *VoiceoverOutput, err error) {
	if err := vouo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   voiceoveroutput.Table,
			Columns: voiceoveroutput.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: voiceoveroutput.FieldID,
			},
		},
	}
	id, ok := vouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VoiceoverOutput.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voiceoveroutput.FieldID)
		for _, f := range fields {
			if !voiceoveroutput.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voiceoveroutput.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vouo.mutation.AudioPath(); ok {
		_spec.SetField(voiceoveroutput.FieldAudioPath, field.TypeString, value)
	}
	if value, ok := vouo.mutation.IsFavorited(); ok {
		_spec.SetField(voiceoveroutput.FieldIsFavorited, field.TypeBool, value)
	}
	if value, ok := vouo.mutation.DeletedAt(); ok {
		_spec.SetField(voiceoveroutput.FieldDeletedAt, field.TypeTime, value)
	}
	if vouo.mutation.DeletedAtCleared() {
		_spec.ClearField(voiceoveroutput.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vouo.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceoveroutput.FieldUpdatedAt, field.TypeTime, value)
	}
	if vouo.mutation.VoiceoversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceoveroutput.VoiceoversTable,
			Columns: []string{voiceoveroutput.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceover.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vouo.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceoveroutput.VoiceoversTable,
			Columns: []string{voiceoveroutput.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceover.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vouo.modifiers...)
	_node = &VoiceoverOutput{config: vouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voiceoveroutput.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vouo.mutation.done = true
	return _node, nil
}
