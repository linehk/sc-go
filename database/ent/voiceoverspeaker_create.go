// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"
)

// VoiceoverSpeakerCreate is the builder for creating a VoiceoverSpeaker entity.
type VoiceoverSpeakerCreate struct {
	config
	mutation *VoiceoverSpeakerMutation
	hooks    []Hook
}

// SetNameInWorker sets the "name_in_worker" field.
func (vsc *VoiceoverSpeakerCreate) SetNameInWorker(s string) *VoiceoverSpeakerCreate {
	vsc.mutation.SetNameInWorker(s)
	return vsc
}

// SetIsActive sets the "is_active" field.
func (vsc *VoiceoverSpeakerCreate) SetIsActive(b bool) *VoiceoverSpeakerCreate {
	vsc.mutation.SetIsActive(b)
	return vsc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableIsActive(b *bool) *VoiceoverSpeakerCreate {
	if b != nil {
		vsc.SetIsActive(*b)
	}
	return vsc
}

// SetIsDefault sets the "is_default" field.
func (vsc *VoiceoverSpeakerCreate) SetIsDefault(b bool) *VoiceoverSpeakerCreate {
	vsc.mutation.SetIsDefault(b)
	return vsc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableIsDefault(b *bool) *VoiceoverSpeakerCreate {
	if b != nil {
		vsc.SetIsDefault(*b)
	}
	return vsc
}

// SetIsHidden sets the "is_hidden" field.
func (vsc *VoiceoverSpeakerCreate) SetIsHidden(b bool) *VoiceoverSpeakerCreate {
	vsc.mutation.SetIsHidden(b)
	return vsc
}

// SetNillableIsHidden sets the "is_hidden" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableIsHidden(b *bool) *VoiceoverSpeakerCreate {
	if b != nil {
		vsc.SetIsHidden(*b)
	}
	return vsc
}

// SetLocale sets the "locale" field.
func (vsc *VoiceoverSpeakerCreate) SetLocale(s string) *VoiceoverSpeakerCreate {
	vsc.mutation.SetLocale(s)
	return vsc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableLocale(s *string) *VoiceoverSpeakerCreate {
	if s != nil {
		vsc.SetLocale(*s)
	}
	return vsc
}

// SetModelID sets the "model_id" field.
func (vsc *VoiceoverSpeakerCreate) SetModelID(u uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.SetModelID(u)
	return vsc
}

// SetCreatedAt sets the "created_at" field.
func (vsc *VoiceoverSpeakerCreate) SetCreatedAt(t time.Time) *VoiceoverSpeakerCreate {
	vsc.mutation.SetCreatedAt(t)
	return vsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableCreatedAt(t *time.Time) *VoiceoverSpeakerCreate {
	if t != nil {
		vsc.SetCreatedAt(*t)
	}
	return vsc
}

// SetUpdatedAt sets the "updated_at" field.
func (vsc *VoiceoverSpeakerCreate) SetUpdatedAt(t time.Time) *VoiceoverSpeakerCreate {
	vsc.mutation.SetUpdatedAt(t)
	return vsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableUpdatedAt(t *time.Time) *VoiceoverSpeakerCreate {
	if t != nil {
		vsc.SetUpdatedAt(*t)
	}
	return vsc
}

// SetID sets the "id" field.
func (vsc *VoiceoverSpeakerCreate) SetID(u uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.SetID(u)
	return vsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vsc *VoiceoverSpeakerCreate) SetNillableID(u *uuid.UUID) *VoiceoverSpeakerCreate {
	if u != nil {
		vsc.SetID(*u)
	}
	return vsc
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (vsc *VoiceoverSpeakerCreate) AddVoiceoverIDs(ids ...uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.AddVoiceoverIDs(ids...)
	return vsc
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (vsc *VoiceoverSpeakerCreate) AddVoiceovers(v ...*Voiceover) *VoiceoverSpeakerCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vsc.AddVoiceoverIDs(ids...)
}

// SetVoiceoverModelsID sets the "voiceover_models" edge to the VoiceoverModel entity by ID.
func (vsc *VoiceoverSpeakerCreate) SetVoiceoverModelsID(id uuid.UUID) *VoiceoverSpeakerCreate {
	vsc.mutation.SetVoiceoverModelsID(id)
	return vsc
}

// SetVoiceoverModels sets the "voiceover_models" edge to the VoiceoverModel entity.
func (vsc *VoiceoverSpeakerCreate) SetVoiceoverModels(v *VoiceoverModel) *VoiceoverSpeakerCreate {
	return vsc.SetVoiceoverModelsID(v.ID)
}

// Mutation returns the VoiceoverSpeakerMutation object of the builder.
func (vsc *VoiceoverSpeakerCreate) Mutation() *VoiceoverSpeakerMutation {
	return vsc.mutation
}

// Save creates the VoiceoverSpeaker in the database.
func (vsc *VoiceoverSpeakerCreate) Save(ctx context.Context) (*VoiceoverSpeaker, error) {
	vsc.defaults()
	return withHooks[*VoiceoverSpeaker, VoiceoverSpeakerMutation](ctx, vsc.sqlSave, vsc.mutation, vsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vsc *VoiceoverSpeakerCreate) SaveX(ctx context.Context) *VoiceoverSpeaker {
	v, err := vsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vsc *VoiceoverSpeakerCreate) Exec(ctx context.Context) error {
	_, err := vsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsc *VoiceoverSpeakerCreate) ExecX(ctx context.Context) {
	if err := vsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsc *VoiceoverSpeakerCreate) defaults() {
	if _, ok := vsc.mutation.IsActive(); !ok {
		v := voiceoverspeaker.DefaultIsActive
		vsc.mutation.SetIsActive(v)
	}
	if _, ok := vsc.mutation.IsDefault(); !ok {
		v := voiceoverspeaker.DefaultIsDefault
		vsc.mutation.SetIsDefault(v)
	}
	if _, ok := vsc.mutation.IsHidden(); !ok {
		v := voiceoverspeaker.DefaultIsHidden
		vsc.mutation.SetIsHidden(v)
	}
	if _, ok := vsc.mutation.Locale(); !ok {
		v := voiceoverspeaker.DefaultLocale
		vsc.mutation.SetLocale(v)
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		v := voiceoverspeaker.DefaultCreatedAt()
		vsc.mutation.SetCreatedAt(v)
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		v := voiceoverspeaker.DefaultUpdatedAt()
		vsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vsc.mutation.ID(); !ok {
		v := voiceoverspeaker.DefaultID()
		vsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsc *VoiceoverSpeakerCreate) check() error {
	if _, ok := vsc.mutation.NameInWorker(); !ok {
		return &ValidationError{Name: "name_in_worker", err: errors.New(`ent: missing required field "VoiceoverSpeaker.name_in_worker"`)}
	}
	if _, ok := vsc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "VoiceoverSpeaker.is_active"`)}
	}
	if _, ok := vsc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "VoiceoverSpeaker.is_default"`)}
	}
	if _, ok := vsc.mutation.IsHidden(); !ok {
		return &ValidationError{Name: "is_hidden", err: errors.New(`ent: missing required field "VoiceoverSpeaker.is_hidden"`)}
	}
	if _, ok := vsc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "VoiceoverSpeaker.locale"`)}
	}
	if _, ok := vsc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "VoiceoverSpeaker.model_id"`)}
	}
	if _, ok := vsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VoiceoverSpeaker.created_at"`)}
	}
	if _, ok := vsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VoiceoverSpeaker.updated_at"`)}
	}
	if _, ok := vsc.mutation.VoiceoverModelsID(); !ok {
		return &ValidationError{Name: "voiceover_models", err: errors.New(`ent: missing required edge "VoiceoverSpeaker.voiceover_models"`)}
	}
	return nil
}

func (vsc *VoiceoverSpeakerCreate) sqlSave(ctx context.Context) (*VoiceoverSpeaker, error) {
	if err := vsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vsc.mutation.id = &_node.ID
	vsc.mutation.done = true
	return _node, nil
}

func (vsc *VoiceoverSpeakerCreate) createSpec() (*VoiceoverSpeaker, *sqlgraph.CreateSpec) {
	var (
		_node = &VoiceoverSpeaker{config: vsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: voiceoverspeaker.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: voiceoverspeaker.FieldID,
			},
		}
	)
	if id, ok := vsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vsc.mutation.NameInWorker(); ok {
		_spec.SetField(voiceoverspeaker.FieldNameInWorker, field.TypeString, value)
		_node.NameInWorker = value
	}
	if value, ok := vsc.mutation.IsActive(); ok {
		_spec.SetField(voiceoverspeaker.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := vsc.mutation.IsDefault(); ok {
		_spec.SetField(voiceoverspeaker.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := vsc.mutation.IsHidden(); ok {
		_spec.SetField(voiceoverspeaker.FieldIsHidden, field.TypeBool, value)
		_node.IsHidden = value
	}
	if value, ok := vsc.mutation.Locale(); ok {
		_spec.SetField(voiceoverspeaker.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := vsc.mutation.CreatedAt(); ok {
		_spec.SetField(voiceoverspeaker.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vsc.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceoverspeaker.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := vsc.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceoverspeaker.VoiceoversTable,
			Columns: []string{voiceoverspeaker.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceover.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vsc.mutation.VoiceoverModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceoverspeaker.VoiceoverModelsTable,
			Columns: []string{voiceoverspeaker.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceovermodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VoiceoverSpeakerCreateBulk is the builder for creating many VoiceoverSpeaker entities in bulk.
type VoiceoverSpeakerCreateBulk struct {
	config
	builders []*VoiceoverSpeakerCreate
}

// Save creates the VoiceoverSpeaker entities in the database.
func (vscb *VoiceoverSpeakerCreateBulk) Save(ctx context.Context) ([]*VoiceoverSpeaker, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vscb.builders))
	nodes := make([]*VoiceoverSpeaker, len(vscb.builders))
	mutators := make([]Mutator, len(vscb.builders))
	for i := range vscb.builders {
		func(i int, root context.Context) {
			builder := vscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoiceoverSpeakerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vscb *VoiceoverSpeakerCreateBulk) SaveX(ctx context.Context) []*VoiceoverSpeaker {
	v, err := vscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vscb *VoiceoverSpeakerCreateBulk) Exec(ctx context.Context) error {
	_, err := vscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vscb *VoiceoverSpeakerCreateBulk) ExecX(ctx context.Context) {
	if err := vscb.Exec(ctx); err != nil {
		panic(err)
	}
}
