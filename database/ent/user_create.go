// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/credit"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/userrole"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (uc *UserCreate) SetStripeCustomerID(s string) *UserCreate {
	uc.mutation.SetStripeCustomerID(s)
	return uc
}

// SetActiveProductID sets the "active_product_id" field.
func (uc *UserCreate) SetActiveProductID(s string) *UserCreate {
	uc.mutation.SetActiveProductID(s)
	return uc
}

// SetNillableActiveProductID sets the "active_product_id" field if the given value is not nil.
func (uc *UserCreate) SetNillableActiveProductID(s *string) *UserCreate {
	if s != nil {
		uc.SetActiveProductID(*s)
	}
	return uc
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uc *UserCreate) SetLastSignInAt(t time.Time) *UserCreate {
	uc.mutation.SetLastSignInAt(t)
	return uc
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastSignInAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastSignInAt(*t)
	}
	return uc
}

// SetLastSeenAt sets the "last_seen_at" field.
func (uc *UserCreate) SetLastSeenAt(t time.Time) *UserCreate {
	uc.mutation.SetLastSeenAt(t)
	return uc
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastSeenAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastSeenAt(*t)
	}
	return uc
}

// SetBannedAt sets the "banned_at" field.
func (uc *UserCreate) SetBannedAt(t time.Time) *UserCreate {
	uc.mutation.SetBannedAt(t)
	return uc
}

// SetNillableBannedAt sets the "banned_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableBannedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetBannedAt(*t)
	}
	return uc
}

// SetScheduledForDeletionOn sets the "scheduled_for_deletion_on" field.
func (uc *UserCreate) SetScheduledForDeletionOn(t time.Time) *UserCreate {
	uc.mutation.SetScheduledForDeletionOn(t)
	return uc
}

// SetNillableScheduledForDeletionOn sets the "scheduled_for_deletion_on" field if the given value is not nil.
func (uc *UserCreate) SetNillableScheduledForDeletionOn(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetScheduledForDeletionOn(*t)
	}
	return uc
}

// SetDataDeletedAt sets the "data_deleted_at" field.
func (uc *UserCreate) SetDataDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDataDeletedAt(t)
	return uc
}

// SetNillableDataDeletedAt sets the "data_deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDataDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDataDeletedAt(*t)
	}
	return uc
}

// SetWantsEmail sets the "wants_email" field.
func (uc *UserCreate) SetWantsEmail(b bool) *UserCreate {
	uc.mutation.SetWantsEmail(b)
	return uc
}

// SetNillableWantsEmail sets the "wants_email" field if the given value is not nil.
func (uc *UserCreate) SetNillableWantsEmail(b *bool) *UserCreate {
	if b != nil {
		uc.SetWantsEmail(*b)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uc *UserCreate) AddUserRoleIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddUserRoleIDs(ids...)
	return uc
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uc *UserCreate) AddUserRoles(u ...*UserRole) *UserCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserRoleIDs(ids...)
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (uc *UserCreate) AddGenerationIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddGenerationIDs(ids...)
	return uc
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (uc *UserCreate) AddGenerations(g ...*Generation) *UserCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (uc *UserCreate) AddUpscaleIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddUpscaleIDs(ids...)
	return uc
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (uc *UserCreate) AddUpscales(u ...*Upscale) *UserCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUpscaleIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Credit entity by IDs.
func (uc *UserCreate) AddCreditIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddCreditIDs(ids...)
	return uc
}

// AddCredits adds the "credits" edges to the Credit entity.
func (uc *UserCreate) AddCredits(c ...*Credit) *UserCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddCreditIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (uc *UserCreate) AddAPITokenIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddAPITokenIDs(ids...)
	return uc
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (uc *UserCreate) AddAPITokens(a ...*ApiToken) *UserCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAPITokenIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks[*User, UserMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.LastSeenAt(); !ok {
		v := user.DefaultLastSeenAt()
		uc.mutation.SetLastSeenAt(v)
	}
	if _, ok := uc.mutation.WantsEmail(); !ok {
		v := user.DefaultWantsEmail
		uc.mutation.SetWantsEmail(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.StripeCustomerID(); !ok {
		return &ValidationError{Name: "stripe_customer_id", err: errors.New(`ent: missing required field "User.stripe_customer_id"`)}
	}
	if _, ok := uc.mutation.LastSeenAt(); !ok {
		return &ValidationError{Name: "last_seen_at", err: errors.New(`ent: missing required field "User.last_seen_at"`)}
	}
	if _, ok := uc.mutation.WantsEmail(); !ok {
		return &ValidationError{Name: "wants_email", err: errors.New(`ent: missing required field "User.wants_email"`)}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.StripeCustomerID(); ok {
		_spec.SetField(user.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = value
	}
	if value, ok := uc.mutation.ActiveProductID(); ok {
		_spec.SetField(user.FieldActiveProductID, field.TypeString, value)
		_node.ActiveProductID = &value
	}
	if value, ok := uc.mutation.LastSignInAt(); ok {
		_spec.SetField(user.FieldLastSignInAt, field.TypeTime, value)
		_node.LastSignInAt = &value
	}
	if value, ok := uc.mutation.LastSeenAt(); ok {
		_spec.SetField(user.FieldLastSeenAt, field.TypeTime, value)
		_node.LastSeenAt = value
	}
	if value, ok := uc.mutation.BannedAt(); ok {
		_spec.SetField(user.FieldBannedAt, field.TypeTime, value)
		_node.BannedAt = &value
	}
	if value, ok := uc.mutation.ScheduledForDeletionOn(); ok {
		_spec.SetField(user.FieldScheduledForDeletionOn, field.TypeTime, value)
		_node.ScheduledForDeletionOn = &value
	}
	if value, ok := uc.mutation.DataDeletedAt(); ok {
		_spec.SetField(user.FieldDataDeletedAt, field.TypeTime, value)
		_node.DataDeletedAt = &value
	}
	if value, ok := uc.mutation.WantsEmail(); ok {
		_spec.SetField(user.FieldWantsEmail, field.TypeBool, value)
		_node.WantsEmail = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := uc.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GenerationsTable,
			Columns: []string{user.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UpscalesTable,
			Columns: []string{user.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: upscale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CreditsTable,
			Columns: []string{user.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
