// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/apitoken"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/prompt"
	"github.com/stablecog/sc-go/database/ent/user"
	"github.com/stablecog/sc-go/database/ent/voiceover"
	"github.com/stablecog/sc-go/database/ent/voiceovermodel"
	"github.com/stablecog/sc-go/database/ent/voiceoveroutput"
	"github.com/stablecog/sc-go/database/ent/voiceoverspeaker"
)

// VoiceoverCreate is the builder for creating a Voiceover entity.
type VoiceoverCreate struct {
	config
	mutation *VoiceoverMutation
	hooks    []Hook
}

// SetCountryCode sets the "country_code" field.
func (vc *VoiceoverCreate) SetCountryCode(s string) *VoiceoverCreate {
	vc.mutation.SetCountryCode(s)
	return vc
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableCountryCode(s *string) *VoiceoverCreate {
	if s != nil {
		vc.SetCountryCode(*s)
	}
	return vc
}

// SetStatus sets the "status" field.
func (vc *VoiceoverCreate) SetStatus(v voiceover.Status) *VoiceoverCreate {
	vc.mutation.SetStatus(v)
	return vc
}

// SetFailureReason sets the "failure_reason" field.
func (vc *VoiceoverCreate) SetFailureReason(s string) *VoiceoverCreate {
	vc.mutation.SetFailureReason(s)
	return vc
}

// SetNillableFailureReason sets the "failure_reason" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableFailureReason(s *string) *VoiceoverCreate {
	if s != nil {
		vc.SetFailureReason(*s)
	}
	return vc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (vc *VoiceoverCreate) SetStripeProductID(s string) *VoiceoverCreate {
	vc.mutation.SetStripeProductID(s)
	return vc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableStripeProductID(s *string) *VoiceoverCreate {
	if s != nil {
		vc.SetStripeProductID(*s)
	}
	return vc
}

// SetTemperature sets the "temperature" field.
func (vc *VoiceoverCreate) SetTemperature(f float32) *VoiceoverCreate {
	vc.mutation.SetTemperature(f)
	return vc
}

// SetPromptID sets the "prompt_id" field.
func (vc *VoiceoverCreate) SetPromptID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetPromptID(u)
	return vc
}

// SetNillablePromptID sets the "prompt_id" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillablePromptID(u *uuid.UUID) *VoiceoverCreate {
	if u != nil {
		vc.SetPromptID(*u)
	}
	return vc
}

// SetUserID sets the "user_id" field.
func (vc *VoiceoverCreate) SetUserID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetUserID(u)
	return vc
}

// SetDeviceInfoID sets the "device_info_id" field.
func (vc *VoiceoverCreate) SetDeviceInfoID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetDeviceInfoID(u)
	return vc
}

// SetModelID sets the "model_id" field.
func (vc *VoiceoverCreate) SetModelID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetModelID(u)
	return vc
}

// SetSpeakerID sets the "speaker_id" field.
func (vc *VoiceoverCreate) SetSpeakerID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetSpeakerID(u)
	return vc
}

// SetAPITokenID sets the "api_token_id" field.
func (vc *VoiceoverCreate) SetAPITokenID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetAPITokenID(u)
	return vc
}

// SetNillableAPITokenID sets the "api_token_id" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableAPITokenID(u *uuid.UUID) *VoiceoverCreate {
	if u != nil {
		vc.SetAPITokenID(*u)
	}
	return vc
}

// SetStartedAt sets the "started_at" field.
func (vc *VoiceoverCreate) SetStartedAt(t time.Time) *VoiceoverCreate {
	vc.mutation.SetStartedAt(t)
	return vc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableStartedAt(t *time.Time) *VoiceoverCreate {
	if t != nil {
		vc.SetStartedAt(*t)
	}
	return vc
}

// SetCompletedAt sets the "completed_at" field.
func (vc *VoiceoverCreate) SetCompletedAt(t time.Time) *VoiceoverCreate {
	vc.mutation.SetCompletedAt(t)
	return vc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableCompletedAt(t *time.Time) *VoiceoverCreate {
	if t != nil {
		vc.SetCompletedAt(*t)
	}
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VoiceoverCreate) SetCreatedAt(t time.Time) *VoiceoverCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableCreatedAt(t *time.Time) *VoiceoverCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VoiceoverCreate) SetUpdatedAt(t time.Time) *VoiceoverCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableUpdatedAt(t *time.Time) *VoiceoverCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VoiceoverCreate) SetID(u uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableID(u *uuid.UUID) *VoiceoverCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// SetUser sets the "user" edge to the User entity.
func (vc *VoiceoverCreate) SetUser(u *User) *VoiceoverCreate {
	return vc.SetUserID(u.ID)
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (vc *VoiceoverCreate) SetPrompt(p *Prompt) *VoiceoverCreate {
	return vc.SetPromptID(p.ID)
}

// SetDeviceInfo sets the "device_info" edge to the DeviceInfo entity.
func (vc *VoiceoverCreate) SetDeviceInfo(d *DeviceInfo) *VoiceoverCreate {
	return vc.SetDeviceInfoID(d.ID)
}

// SetVoiceoverModelsID sets the "voiceover_models" edge to the VoiceoverModel entity by ID.
func (vc *VoiceoverCreate) SetVoiceoverModelsID(id uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetVoiceoverModelsID(id)
	return vc
}

// SetVoiceoverModels sets the "voiceover_models" edge to the VoiceoverModel entity.
func (vc *VoiceoverCreate) SetVoiceoverModels(v *VoiceoverModel) *VoiceoverCreate {
	return vc.SetVoiceoverModelsID(v.ID)
}

// SetVoiceoverSpeakersID sets the "voiceover_speakers" edge to the VoiceoverSpeaker entity by ID.
func (vc *VoiceoverCreate) SetVoiceoverSpeakersID(id uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetVoiceoverSpeakersID(id)
	return vc
}

// SetVoiceoverSpeakers sets the "voiceover_speakers" edge to the VoiceoverSpeaker entity.
func (vc *VoiceoverCreate) SetVoiceoverSpeakers(v *VoiceoverSpeaker) *VoiceoverCreate {
	return vc.SetVoiceoverSpeakersID(v.ID)
}

// SetAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID.
func (vc *VoiceoverCreate) SetAPITokensID(id uuid.UUID) *VoiceoverCreate {
	vc.mutation.SetAPITokensID(id)
	return vc
}

// SetNillableAPITokensID sets the "api_tokens" edge to the ApiToken entity by ID if the given value is not nil.
func (vc *VoiceoverCreate) SetNillableAPITokensID(id *uuid.UUID) *VoiceoverCreate {
	if id != nil {
		vc = vc.SetAPITokensID(*id)
	}
	return vc
}

// SetAPITokens sets the "api_tokens" edge to the ApiToken entity.
func (vc *VoiceoverCreate) SetAPITokens(a *ApiToken) *VoiceoverCreate {
	return vc.SetAPITokensID(a.ID)
}

// AddVoiceoverOutputIDs adds the "voiceover_outputs" edge to the VoiceoverOutput entity by IDs.
func (vc *VoiceoverCreate) AddVoiceoverOutputIDs(ids ...uuid.UUID) *VoiceoverCreate {
	vc.mutation.AddVoiceoverOutputIDs(ids...)
	return vc
}

// AddVoiceoverOutputs adds the "voiceover_outputs" edges to the VoiceoverOutput entity.
func (vc *VoiceoverCreate) AddVoiceoverOutputs(v ...*VoiceoverOutput) *VoiceoverCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vc.AddVoiceoverOutputIDs(ids...)
}

// Mutation returns the VoiceoverMutation object of the builder.
func (vc *VoiceoverCreate) Mutation() *VoiceoverMutation {
	return vc.mutation
}

// Save creates the Voiceover in the database.
func (vc *VoiceoverCreate) Save(ctx context.Context) (*Voiceover, error) {
	vc.defaults()
	return withHooks[*Voiceover, VoiceoverMutation](ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VoiceoverCreate) SaveX(ctx context.Context) *Voiceover {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VoiceoverCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VoiceoverCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VoiceoverCreate) defaults() {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := voiceover.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := voiceover.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := voiceover.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VoiceoverCreate) check() error {
	if _, ok := vc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Voiceover.status"`)}
	}
	if v, ok := vc.mutation.Status(); ok {
		if err := voiceover.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Voiceover.status": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "Voiceover.temperature"`)}
	}
	if _, ok := vc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Voiceover.user_id"`)}
	}
	if _, ok := vc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info_id", err: errors.New(`ent: missing required field "Voiceover.device_info_id"`)}
	}
	if _, ok := vc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Voiceover.model_id"`)}
	}
	if _, ok := vc.mutation.SpeakerID(); !ok {
		return &ValidationError{Name: "speaker_id", err: errors.New(`ent: missing required field "Voiceover.speaker_id"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Voiceover.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Voiceover.updated_at"`)}
	}
	if _, ok := vc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Voiceover.user"`)}
	}
	if _, ok := vc.mutation.DeviceInfoID(); !ok {
		return &ValidationError{Name: "device_info", err: errors.New(`ent: missing required edge "Voiceover.device_info"`)}
	}
	if _, ok := vc.mutation.VoiceoverModelsID(); !ok {
		return &ValidationError{Name: "voiceover_models", err: errors.New(`ent: missing required edge "Voiceover.voiceover_models"`)}
	}
	if _, ok := vc.mutation.VoiceoverSpeakersID(); !ok {
		return &ValidationError{Name: "voiceover_speakers", err: errors.New(`ent: missing required edge "Voiceover.voiceover_speakers"`)}
	}
	return nil
}

func (vc *VoiceoverCreate) sqlSave(ctx context.Context) (*Voiceover, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VoiceoverCreate) createSpec() (*Voiceover, *sqlgraph.CreateSpec) {
	var (
		_node = &Voiceover{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: voiceover.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: voiceover.FieldID,
			},
		}
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.CountryCode(); ok {
		_spec.SetField(voiceover.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = &value
	}
	if value, ok := vc.mutation.Status(); ok {
		_spec.SetField(voiceover.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := vc.mutation.FailureReason(); ok {
		_spec.SetField(voiceover.FieldFailureReason, field.TypeString, value)
		_node.FailureReason = &value
	}
	if value, ok := vc.mutation.StripeProductID(); ok {
		_spec.SetField(voiceover.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = &value
	}
	if value, ok := vc.mutation.Temperature(); ok {
		_spec.SetField(voiceover.FieldTemperature, field.TypeFloat32, value)
		_node.Temperature = value
	}
	if value, ok := vc.mutation.StartedAt(); ok {
		_spec.SetField(voiceover.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := vc.mutation.CompletedAt(); ok {
		_spec.SetField(voiceover.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(voiceover.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(voiceover.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.UserTable,
			Columns: []string{voiceover.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.PromptTable,
			Columns: []string{voiceover.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: prompt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PromptID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.DeviceInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.DeviceInfoTable,
			Columns: []string{voiceover.DeviceInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deviceinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeviceInfoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.VoiceoverModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverModelsTable,
			Columns: []string{voiceover.VoiceoverModelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceovermodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.VoiceoverSpeakersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.VoiceoverSpeakersTable,
			Columns: []string{voiceover.VoiceoverSpeakersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceoverspeaker.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SpeakerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   voiceover.APITokensTable,
			Columns: []string{voiceover.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.APITokenID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.VoiceoverOutputsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   voiceover.VoiceoverOutputsTable,
			Columns: []string{voiceover.VoiceoverOutputsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceoveroutput.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VoiceoverCreateBulk is the builder for creating many Voiceover entities in bulk.
type VoiceoverCreateBulk struct {
	config
	builders []*VoiceoverCreate
}

// Save creates the Voiceover entities in the database.
func (vcb *VoiceoverCreateBulk) Save(ctx context.Context) ([]*Voiceover, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Voiceover, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoiceoverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VoiceoverCreateBulk) SaveX(ctx context.Context) []*Voiceover {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VoiceoverCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VoiceoverCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
