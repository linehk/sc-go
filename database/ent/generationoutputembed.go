// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	pgvector "github.com/pgvector/pgvector-go"
	"github.com/stablecog/sc-go/database/ent/generationoutput"
	"github.com/stablecog/sc-go/database/ent/generationoutputembed"
)

// GenerationOutputEmbed is the model entity for the GenerationOutputEmbed schema.
type GenerationOutputEmbed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PromptEmbedding holds the value of the "prompt_embedding" field.
	PromptEmbedding pgvector.Vector `json:"prompt_embedding,omitempty"`
	// ImageEmbedding holds the value of the "image_embedding" field.
	ImageEmbedding pgvector.Vector `json:"image_embedding,omitempty"`
	// OutputID holds the value of the "output_id" field.
	OutputID uuid.UUID `json:"output_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GenerationOutputEmbedQuery when eager-loading is set.
	Edges GenerationOutputEmbedEdges `json:"edges"`
}

// GenerationOutputEmbedEdges holds the relations/edges for other nodes in the graph.
type GenerationOutputEmbedEdges struct {
	// GenerationOutputs holds the value of the generation_outputs edge.
	GenerationOutputs *GenerationOutput `json:"generation_outputs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GenerationOutputsOrErr returns the GenerationOutputs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GenerationOutputEmbedEdges) GenerationOutputsOrErr() (*GenerationOutput, error) {
	if e.loadedTypes[0] {
		if e.GenerationOutputs == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: generationoutput.Label}
		}
		return e.GenerationOutputs, nil
	}
	return nil, &NotLoadedError{edge: "generation_outputs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GenerationOutputEmbed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case generationoutputembed.FieldPromptEmbedding, generationoutputembed.FieldImageEmbedding:
			values[i] = new(pgvector.Vector)
		case generationoutputembed.FieldCreatedAt, generationoutputembed.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case generationoutputembed.FieldID, generationoutputembed.FieldOutputID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GenerationOutputEmbed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GenerationOutputEmbed fields.
func (goe *GenerationOutputEmbed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case generationoutputembed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				goe.ID = *value
			}
		case generationoutputembed.FieldPromptEmbedding:
			if value, ok := values[i].(*pgvector.Vector); !ok {
				return fmt.Errorf("unexpected type %T for field prompt_embedding", values[i])
			} else if value != nil {
				goe.PromptEmbedding = *value
			}
		case generationoutputembed.FieldImageEmbedding:
			if value, ok := values[i].(*pgvector.Vector); !ok {
				return fmt.Errorf("unexpected type %T for field image_embedding", values[i])
			} else if value != nil {
				goe.ImageEmbedding = *value
			}
		case generationoutputembed.FieldOutputID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field output_id", values[i])
			} else if value != nil {
				goe.OutputID = *value
			}
		case generationoutputembed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				goe.CreatedAt = value.Time
			}
		case generationoutputembed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				goe.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryGenerationOutputs queries the "generation_outputs" edge of the GenerationOutputEmbed entity.
func (goe *GenerationOutputEmbed) QueryGenerationOutputs() *GenerationOutputQuery {
	return NewGenerationOutputEmbedClient(goe.config).QueryGenerationOutputs(goe)
}

// Update returns a builder for updating this GenerationOutputEmbed.
// Note that you need to call GenerationOutputEmbed.Unwrap() before calling this method if this GenerationOutputEmbed
// was returned from a transaction, and the transaction was committed or rolled back.
func (goe *GenerationOutputEmbed) Update() *GenerationOutputEmbedUpdateOne {
	return NewGenerationOutputEmbedClient(goe.config).UpdateOne(goe)
}

// Unwrap unwraps the GenerationOutputEmbed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (goe *GenerationOutputEmbed) Unwrap() *GenerationOutputEmbed {
	_tx, ok := goe.config.driver.(*txDriver)
	if !ok {
		panic("ent: GenerationOutputEmbed is not a transactional entity")
	}
	goe.config.driver = _tx.drv
	return goe
}

// String implements the fmt.Stringer.
func (goe *GenerationOutputEmbed) String() string {
	var builder strings.Builder
	builder.WriteString("GenerationOutputEmbed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", goe.ID))
	builder.WriteString("prompt_embedding=")
	builder.WriteString(fmt.Sprintf("%v", goe.PromptEmbedding))
	builder.WriteString(", ")
	builder.WriteString("image_embedding=")
	builder.WriteString(fmt.Sprintf("%v", goe.ImageEmbedding))
	builder.WriteString(", ")
	builder.WriteString("output_id=")
	builder.WriteString(fmt.Sprintf("%v", goe.OutputID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(goe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(goe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GenerationOutputEmbeds is a parsable slice of GenerationOutputEmbed.
type GenerationOutputEmbeds []*GenerationOutputEmbed

func (goe GenerationOutputEmbeds) config(cfg config) {
	for _i := range goe {
		goe[_i].config = cfg
	}
}
