// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/stablecog/sc-go/database/ent/mqlog"
	"github.com/stablecog/sc-go/database/ent/predicate"
)

// MqLogDelete is the builder for deleting a MqLog entity.
type MqLogDelete struct {
	config
	hooks    []Hook
	mutation *MqLogMutation
}

// Where appends a list predicates to the MqLogDelete builder.
func (mld *MqLogDelete) Where(ps ...predicate.MqLog) *MqLogDelete {
	mld.mutation.Where(ps...)
	return mld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mld *MqLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, MqLogMutation](ctx, mld.sqlExec, mld.mutation, mld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mld *MqLogDelete) ExecX(ctx context.Context) int {
	n, err := mld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mld *MqLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: mqlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mqlog.FieldID,
			},
		},
	}
	if ps := mld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mld.mutation.done = true
	return affected, err
}

// MqLogDeleteOne is the builder for deleting a single MqLog entity.
type MqLogDeleteOne struct {
	mld *MqLogDelete
}

// Exec executes the deletion query.
func (mldo *MqLogDeleteOne) Exec(ctx context.Context) error {
	n, err := mldo.mld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{mqlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mldo *MqLogDeleteOne) ExecX(ctx context.Context) {
	mldo.mld.ExecX(ctx)
}
