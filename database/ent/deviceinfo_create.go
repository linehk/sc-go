// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/stablecog/sc-go/database/ent/deviceinfo"
	"github.com/stablecog/sc-go/database/ent/generation"
	"github.com/stablecog/sc-go/database/ent/upscale"
	"github.com/stablecog/sc-go/database/ent/voiceover"
)

// DeviceInfoCreate is the builder for creating a DeviceInfo entity.
type DeviceInfoCreate struct {
	config
	mutation *DeviceInfoMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (dic *DeviceInfoCreate) SetType(s string) *DeviceInfoCreate {
	dic.mutation.SetType(s)
	return dic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableType(s *string) *DeviceInfoCreate {
	if s != nil {
		dic.SetType(*s)
	}
	return dic
}

// SetOs sets the "os" field.
func (dic *DeviceInfoCreate) SetOs(s string) *DeviceInfoCreate {
	dic.mutation.SetOs(s)
	return dic
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableOs(s *string) *DeviceInfoCreate {
	if s != nil {
		dic.SetOs(*s)
	}
	return dic
}

// SetBrowser sets the "browser" field.
func (dic *DeviceInfoCreate) SetBrowser(s string) *DeviceInfoCreate {
	dic.mutation.SetBrowser(s)
	return dic
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableBrowser(s *string) *DeviceInfoCreate {
	if s != nil {
		dic.SetBrowser(*s)
	}
	return dic
}

// SetCreatedAt sets the "created_at" field.
func (dic *DeviceInfoCreate) SetCreatedAt(t time.Time) *DeviceInfoCreate {
	dic.mutation.SetCreatedAt(t)
	return dic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableCreatedAt(t *time.Time) *DeviceInfoCreate {
	if t != nil {
		dic.SetCreatedAt(*t)
	}
	return dic
}

// SetUpdatedAt sets the "updated_at" field.
func (dic *DeviceInfoCreate) SetUpdatedAt(t time.Time) *DeviceInfoCreate {
	dic.mutation.SetUpdatedAt(t)
	return dic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableUpdatedAt(t *time.Time) *DeviceInfoCreate {
	if t != nil {
		dic.SetUpdatedAt(*t)
	}
	return dic
}

// SetID sets the "id" field.
func (dic *DeviceInfoCreate) SetID(u uuid.UUID) *DeviceInfoCreate {
	dic.mutation.SetID(u)
	return dic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableID(u *uuid.UUID) *DeviceInfoCreate {
	if u != nil {
		dic.SetID(*u)
	}
	return dic
}

// AddGenerationIDs adds the "generations" edge to the Generation entity by IDs.
func (dic *DeviceInfoCreate) AddGenerationIDs(ids ...uuid.UUID) *DeviceInfoCreate {
	dic.mutation.AddGenerationIDs(ids...)
	return dic
}

// AddGenerations adds the "generations" edges to the Generation entity.
func (dic *DeviceInfoCreate) AddGenerations(g ...*Generation) *DeviceInfoCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return dic.AddGenerationIDs(ids...)
}

// AddUpscaleIDs adds the "upscales" edge to the Upscale entity by IDs.
func (dic *DeviceInfoCreate) AddUpscaleIDs(ids ...uuid.UUID) *DeviceInfoCreate {
	dic.mutation.AddUpscaleIDs(ids...)
	return dic
}

// AddUpscales adds the "upscales" edges to the Upscale entity.
func (dic *DeviceInfoCreate) AddUpscales(u ...*Upscale) *DeviceInfoCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dic.AddUpscaleIDs(ids...)
}

// AddVoiceoverIDs adds the "voiceovers" edge to the Voiceover entity by IDs.
func (dic *DeviceInfoCreate) AddVoiceoverIDs(ids ...uuid.UUID) *DeviceInfoCreate {
	dic.mutation.AddVoiceoverIDs(ids...)
	return dic
}

// AddVoiceovers adds the "voiceovers" edges to the Voiceover entity.
func (dic *DeviceInfoCreate) AddVoiceovers(v ...*Voiceover) *DeviceInfoCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return dic.AddVoiceoverIDs(ids...)
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (dic *DeviceInfoCreate) Mutation() *DeviceInfoMutation {
	return dic.mutation
}

// Save creates the DeviceInfo in the database.
func (dic *DeviceInfoCreate) Save(ctx context.Context) (*DeviceInfo, error) {
	dic.defaults()
	return withHooks[*DeviceInfo, DeviceInfoMutation](ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DeviceInfoCreate) SaveX(ctx context.Context) *DeviceInfo {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DeviceInfoCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DeviceInfoCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DeviceInfoCreate) defaults() {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		v := deviceinfo.DefaultCreatedAt()
		dic.mutation.SetCreatedAt(v)
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		v := deviceinfo.DefaultUpdatedAt()
		dic.mutation.SetUpdatedAt(v)
	}
	if _, ok := dic.mutation.ID(); !ok {
		v := deviceinfo.DefaultID()
		dic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DeviceInfoCreate) check() error {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeviceInfo.created_at"`)}
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeviceInfo.updated_at"`)}
	}
	return nil
}

func (dic *DeviceInfoCreate) sqlSave(ctx context.Context) (*DeviceInfo, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DeviceInfoCreate) createSpec() (*DeviceInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceInfo{config: dic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deviceinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deviceinfo.FieldID,
			},
		}
	)
	if id, ok := dic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dic.mutation.GetType(); ok {
		_spec.SetField(deviceinfo.FieldType, field.TypeString, value)
		_node.Type = &value
	}
	if value, ok := dic.mutation.Os(); ok {
		_spec.SetField(deviceinfo.FieldOs, field.TypeString, value)
		_node.Os = &value
	}
	if value, ok := dic.mutation.Browser(); ok {
		_spec.SetField(deviceinfo.FieldBrowser, field.TypeString, value)
		_node.Browser = &value
	}
	if value, ok := dic.mutation.CreatedAt(); ok {
		_spec.SetField(deviceinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dic.mutation.UpdatedAt(); ok {
		_spec.SetField(deviceinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dic.mutation.GenerationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.GenerationsTable,
			Columns: []string{deviceinfo.GenerationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.UpscalesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.UpscalesTable,
			Columns: []string{deviceinfo.UpscalesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: upscale.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dic.mutation.VoiceoversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deviceinfo.VoiceoversTable,
			Columns: []string{deviceinfo.VoiceoversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: voiceover.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceInfoCreateBulk is the builder for creating many DeviceInfo entities in bulk.
type DeviceInfoCreateBulk struct {
	config
	builders []*DeviceInfoCreate
}

// Save creates the DeviceInfo entities in the database.
func (dicb *DeviceInfoCreateBulk) Save(ctx context.Context) ([]*DeviceInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DeviceInfo, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DeviceInfoCreateBulk) SaveX(ctx context.Context) []*DeviceInfo {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DeviceInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DeviceInfoCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
